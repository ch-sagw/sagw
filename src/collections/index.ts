// plc
import { Users } from '@/collections/Plc/Users';
import { Images } from '@/collections/Plc/Images';
import { Videos } from '@/collections/Plc/Videos';
import { Svgs } from '@/collections/Plc/Svgs';
import { NetworkCategories } from '@/collections/Plc/NetworkCategories';
import { Documents } from '@/collections/Plc/Documents';
import { Projects } from '@/collections/Plc/Projects';
import { People } from '@/collections/Plc/People';
import { PublicationTopics } from '@/collections/Plc/PublicationTopics';
import { PublicationTypes } from '@/collections/Plc/PublicationTypes';
import { EventCategories } from '@/collections/Plc/EventCategories';
import { Tenants } from '@/collections/Plc/Tenants';
import { ZenodoDocuments } from '@/collections/Plc/ZenodoDocuments';
import { Forms } from '@/collections/Plc/Forms';
import autogeneratePagesIndex from '@/collections/Pages/autoGeneratedPagesIndex';
import { singletonSlugs } from '@/collections/Pages/pages';
import { Teams } from './Plc/Teams';

// Globals
import { I18nForms } from '@/collections/Globals/i18n/Forms';
import { I18nGlobals } from './Globals/i18n/Globals';
import { Consent } from '@/collections/Globals/Consent';
import { Footer } from '@/collections/Globals/Footer';
import { Header } from '@/collections/Globals/Header';
import { StatusMessage } from '@/collections/Globals/StatusMessage';
import {
  CollectionConfig, CollectionSlug,
} from 'payload';
import { Theme } from '@/collections/Globals/Theme';

// we want to define page slugs once. using the exported collections from this
// file would not work if we would like to import the collections into a block
// or collection -> circular reference or more specific, the collections would
// not be defined yet at the time of importing them into a block. That's why
// we do it this way.
// main reason for this was: we want to add colletions array to the link
// feature in rte. we can't import it from here.

export const plcCollections: CollectionConfig[] = [
  Images,
  Videos,
  Svgs,
  NetworkCategories,
  Documents,
  ZenodoDocuments,
  Projects,
  People,
  Teams,
  PublicationTopics,
  PublicationTypes,
  EventCategories,
  Tenants,
  Users,
  Forms,
];

export const globalCollections: CollectionConfig[] = [
  I18nForms,
  I18nGlobals,
  Consent,
  Footer,
  Header,
  StatusMessage,
  Theme,
];

// payload collections config
export const collections = [

  // Auto-generated pages index
  ...autogeneratePagesIndex,

  // plc
  ...plcCollections,

  // Globals
  ...globalCollections,

];

// multitenant plugin collections config

// TODO: can we get this interface from somewhere?
export interface InterfaceTenantCollectionObject {
  isGlobal?: boolean;
}

const tenantsCollectionsObject: Record<string, InterfaceTenantCollectionObject> = {};

const singletonSlugsarray = singletonSlugs.map((slug) => slug.slug);

collections.forEach((item) => {
  if (item.slug !== Tenants.slug && item.slug !== Users.slug) {
    if (singletonSlugsarray.includes(item.slug as CollectionSlug) || globalCollections.includes(item)) {
      tenantsCollectionsObject[item.slug] = {
        isGlobal: true,
      };
    } else {
      tenantsCollectionsObject[item.slug] = {};
    }
  }
});

export const tenantsCollections = tenantsCollectionsObject;

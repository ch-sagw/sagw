import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { allPages } from '@/collections/Pages/pages';

// BACKGROUND:
// we want to have an array of page slugs (main reason being that we want
// to use it in rte's link feature). at the same time, the internal link chooser
// as well needs information about the linkable pages.

// NOT WORKING SOLUTION:
// first iteration was using dynamic imports. That worked, except that vite
// was not seeing any static imports it could watch for live reload (since
// they were dynamic).

// WORKING SOLUTION
// before starting payload dev-server or prod builds, we execute this script.
// it get's the pages configuration from /src/collections/Pages/pages.ts
// and generates auto-generated-pages-index.ts with all necessary
// imports/exports for all sets/singleton pages.

/* eslint-disable @typescript-eslint/naming-convention */
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
/* eslint-enable @typescript-eslint/naming-convention */

const collectionsDir = path.resolve(__dirname, '../collections');
const indexFile = path.resolve(collectionsDir, 'auto-generated-pages-index.ts');

const imports = allPages
  .map((slug) => `import { ${slug.exportName} } from '@/collections/Pages/${slug.folderName}/${slug.fileName}';`)
  .join('\n');

const exports =
  `export default [\n${
    allPages.map((page) => `  ${page.exportName},`)
      .join('\n')
  }\n];`;

fs.writeFileSync(indexFile, `
// !! AUTO-GENERATED by /src/utilities/generatePayloadPageImports.ts !!\n
${imports}\n
${exports}\n`);

console.log('Pages index generated from collectionsList');

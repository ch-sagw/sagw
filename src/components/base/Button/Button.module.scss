@use "../../../styles/utilities/functions" as *;
@use "../../../styles/mixins/mixins-typo" as *;
@use "../../../styles/utilities/mediaqueries" as *;
@use "../../../styles/utilities/utilities" as *;

.button {
  @include button-text;

  --button-background-color: none;
  --button-border-color: currentcolor;
  --button-color: var(--interaction-primary);
  --button-icon-size: var(--spacing-m);
  --button-padding-block: 20;
  --button-padding-inline: var(--spacing-l);

  display: flex;
  align-items: center;
  column-gap: px-to-rem(var(--spacing-m));
  padding-block: px-to-rem(var(--button-padding-block));
  padding-inline: px-to-rem(var(--button-padding-inline));
  background: var(--button-background-color);
  border: px-to-rem(var(--border-width-m)) solid var(--button-border-color);
  color: var(--button-color);
  text-align: left;
  transition-property: background-color, border, color;
  transition-duration: var(--motion-speed-fast);
  transition-timing-function: var(--motion-ease-out);

  @include forced-colors {
    transition-duration: 0s;

    --button-border-color: LinkText;
    --button-color: LinkText;
  }

  &:is(button) {
    cursor: pointer;
  }

  &:is(a) {
    display: inline-flex;
    text-decoration: none;
  }

  &[disabled] {
    opacity: 0.5;
  }

  .iconStart,
  .iconEnd {
    flex: 0 0 px-to-rem(var(--button-icon-size));
    width: px-to-rem(var(--button-icon-size));
    height: px-to-rem(var(--button-icon-size));

    svg {
      stroke: var(--button-icon-color);

      @include forced-colors {
        stroke: currentcolor;
      }
    }
  }

  &:not([disabled]):is(:hover, :focus) {
    transition-timing-function: var(--motion-ease-out);
  }
}

/**
  * Filled variant
  */
.buttonFilled {
  @include font-smoothing-reset;

  --button-background-color: var(--interaction-primary);
  --button-border-color: var(--interaction-primary);
  --button-color: var(--text-primary-inverted);
  --button-icon-color: var(--icon-secondary-inverted);

  &:not([disabled]):is(:hover, :focus) {
    --button-background-color: var(--interaction-primary-hover);

    @include forced-colors {
      --button-background-color: none;
      --button-border-color: CanvasText;
      --button-color: CanvasText;
    }
  }
}

.buttonFilled.dark {
  @include font-smoothing;

  --button-background-color: var(--interaction-primary-inverted);
  --button-border-color: var(--interaction-primary-inverted);
  --button-color: var(--interaction-primary);
  --button-icon-color: var(--icon-secondary);

  &:not([disabled]):is(:hover, :focus) {
    --button-background-color: var(--interaction-primary-inverted-hover);
    --button-border-color: var(--interaction-primary-inverted-hover);

    @include forced-colors {
      --button-background-color: none;
      --button-border-color: CanvasText;
      --button-color: CanvasText;
    }
  }
}

/**
  * Outlined variant
  */
.buttonOutlined {
  --button-background-color: none;
  --button-icon-color: var(--icon-primary);

  &:not([disabled]):is(:hover, :focus) {
    --button-border-color: var(--interaction-primary-hover);
    --button-color: var(--interaction-primary-hover);
    --button-icon-color: var(--interaction-primary-hover);

    @include forced-colors {
      --button-border-color: CanvasText;
      --button-color: CanvasText;
    }
  }
}

.buttonOutlined.dark {
  --button-border-color: currentcolor;
  --button-color: var(--interaction-primary-inverted);
  --button-icon-color: currentcolor;

  &:not([disabled]):is(:hover, :focus) {
    --button-color: var(--interaction-primary-inverted-hover);
    --button-border-color: var(--button-color);
  }
}

/**
  * Text only variant
  */
.buttonText {
  @include reduced-motion {
    --line-animation-duration: 0s;
  }

  @include forced-colors {
    --line-cover-color: canvasText;
  }

  & {
    --button-icon-color: var(--interaction-secondary);
    --line-animation-duration: var(--motion-speed-very-fast);
    --line-cover-color: canvas;

    // Redefined because we want to use the --button-padding-block
    // variable on the innerText element.
    padding-block: 0;
    border: none;
  }

  &:not([disabled]):is(:hover, :focus) {
    --button-icon-color: var(--interaction-secondary-hover);

    @include forced-colors {
      --button-border-color: CanvasText;
      --button-color: CanvasText;
    }
  }

  &:not([disabled]):is(:hover, :focus) .innerText:before {
    transform: translateX(100%);
    transition-timing-function: var(--motion-ease-in);
    z-index: 2;
  }

  &:not([disabled]):is(:hover, :focus) .innerText .line {
    transform: translateX(-100%);
    transition-duration: 0s;
  }

  &:not([disabled]):is(:hover, :focus) .innerText:after {
    opacity: 1;

    @include forced-colors {
      background: CanvasText;
    }
  }

  &.dark {
    --button-color: var(--text-secondary-inverted);
    --button-icon-color: var(--interaction-primary-inverted);
    --line-cover-color: var(--interaction-primary);

    &:hover {
      --button-color: var(--text-primary-inverted);
    }
  }

  .innerText {
    position: relative;
    overflow: hidden;
    display: inline-block;
    padding-block: px-to-rem(var(--button-padding-block));

    .line,
    &:before,
    &:after {
      position: absolute;
      content: "";
      width: 100%;
      height: px-to-rem(var(--border-width-l));
      inset-inline: 0;
      inset-block-end: px-to-rem(var(--spacing-2xs));
      background: currentcolor;
      transform: translateX(0);
      transition:
        transform var(--line-animation-duration)
        var(--motion-ease-out);
      pointer-events: none;
    }

    .line {
      background: var(--line-cover-color);
      z-index: 2;
    }

    &:after {
      z-index: 1;

      @include forced-colors {
        background: CanvasText;
      }
    }

    &:before {
      background: var(--line-cover-color);
    }
  }

  &[aria-current] {
    .innerText:before,
    .innerText .line {
      display: none;
    }

    .innerText:after {
      @include forced-colors {
        background: LinkText;
      }
    }

    &.dark {
      --button-color: var(--text-primary-inverted);
    }
  }
}

/**
  * Text only variant, small version (e.g. metanav)
  */
.buttonTextSmall {
  @include body-text-s;
}

/**
  * Text only variant, bright version (e.g. nav level 1)
  */
.buttonTextBright {
  &.dark {
    --button-color: var(--text-primary-inverted);
    --button-icon-color: var(--interaction-primary-inverted);
    --line-cover-color: var(--interaction-primary);
  }
}

/**
  * Play button only variant
  */
.buttonPlay {
  --button-play-size: 60;
  --button-icon-size: 38;
  --button-icon-color: var(--icon-primary-inverted);

  display: flex;
  justify-content: center;
  width: px-to-rem(var(--button-play-size));
  height: px-to-rem(var(--button-play-size));
  padding: 0;
  column-gap: unset;
  align-content: center;
  border: px-to-rem(var(--border-width-l)) solid var(--icon-primary-inverted);
  border-radius: 60%;
  transition: transform var(--motion-speed-fast) var(--motion-ease-in);

  @include forced-colors {
    border-color: CanvasText;
  }

  .iconStart {
    * {
      --button-icon-color: var(--icon-primary-inverted);

      width: px-to-rem(var(--button-icon-size));
      height: px-to-rem(var(--button-icon-size));
      fill: var(--icon-primary-inverted);

      @include forced-colors {
        fill: CanvasText;
        stroke: none;
      }
    }
  }

  &:not([disabled]):is(:hover, :focus) {
    transform: scale(1.06);
    transition: transform var(--motion-speed-fast) var(--motion-ease-in);

    @include forced-colors {
      border-color: LinkText;
    }

    .iconStart * {
      @include forced-colors {
        fill: LinkText;
      }
    }
  }
}

/**
  * Social Link icon only variant
  */
.socialLink {
  --button-padding-block: 0;
  --button-padding-inline: 0;
  --button-icon-size: 30;
  --button-icon-color: currentcolor;

  border: none;
  color: var(--icon-secondary-inverted);

  &:hover,
  &:focus {
    color: var(--icon-primary-inverted);

    @include forced-colors {
      color: CanvasText;
    }
  }
}

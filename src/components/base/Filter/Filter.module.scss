@use "../../../styles/utilities/utilities" as *;
@use "../../../styles/utilities/functions" as *;
@use "../../../styles/utilities/mediaqueries" as *;
@use "../../../styles/mixins/mixins-typo" as *;

.filterTransformativeSelect {
  .radioButtonListWrapper {
    @include mq($to: small) {
      display: none;
    }
  }

  .selectWrapper {
    @include mq($from: small) {
      display: none;
    }
  }
}

/**
 * Radio Button List Variant
 */
.radioButtonList {
  @include list-reset;

  @include reduced-motion {
    --animation-duration: 0s;
  }

  --label-background: var(--background-light);
  --label-color: var(--interaction-primary);
  --animation-duration: var(--motion-speed-very-fast);
  --radio-button-outline-offset: var(--border-width-l);

  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: px-to-rem(var(--spacing-m));

  label {
    @include label-text;
    @include font-smoothing;

    display: inline-block;
    position: relative;
    padding-block-start: px-to-rem(var(--spacing-xs));
    padding-block-end: px-to-rem(calc(var(--spacing-xs) + 1));
    padding-inline: px-to-rem(var(--spacing-m));
    background: var(--label-background);
    border-radius: px-to-rem(var(--spacing-l));
    color: var(--label-color);
    transition:
      background-color var(--animation-duration) var(--motion-ease-out),
      color var(--animation-duration) var(--motion-ease-out);

    @supports (text-box-trim: trim-both) {
      padding-block: px-to-rem(calc(var(--spacing-m) - 2));
      text-box-edge: cap alphabetic;
      text-box-trim: trim-both;
    }
  }

  .radioButton {
    position: absolute;
    inset: 0;
    z-index: 0;
    opacity: 0;
    cursor: pointer;

    & + label:hover {
      @include focus-visible;

      outline-offset: px-to-rem(var(--radio-button-outline-offset));
    }

    &:checked {
      & + label {
        @include focus-visible;

        @include forced-colors {
          filter: invert(1);
        }

        --label-background: var(--background-inverted);
        --label-color: var(--text-primary-inverted);

        outline-offset: px-to-rem(var(--radio-button-outline-offset));
        transition:
          background-color var(--animation-duration) var(--motion-ease-in),
          color var(--animation-duration) var(--motion-ease-in);
      }

      @include forced-colors {
        border: px-to-rem(var(--border-width-s)) solid CanvasText;
      }
    }

    &:focus {
      & + label {
        --label-background: var(--background-inverted);
        --label-color: var(--text-primary-inverted);
      }
    }
  }
}

.radioButtonListItem {
  position: relative;
}

/**
 * Select Variant
 */
.filterSelectLabel {
  @include mq($to: medium) {
    width: 100%;
  }

  @include reduced-motion {
    --animation-duration: 0s;
  }

  --label-background: var(--background-light);
  --label-color: var(--interaction-primary);
  --icon-color: var(--label-color);
  --animation-duration: var(--motion-speed-very-fast);

  position: relative;
  display: inline-block;

  .filterSelect {
    transition: color var(--animation-duration) var(--motion-ease-out);
  }

  .filterSelectLabelIcon path {
    transition: stroke var(--animation-duration) var(--motion-ease-out);
  }

  &:has(select:focus),
  &:has(select:hover) {
    @include forced-colors {
      filter: invert(1);
    }

    --label-background: var(--background-inverted);
    --label-color: var(--text-primary-inverted);

    &:after,
    &:before {
      transition: background-color var(--animation-duration) var(--motion-ease-in);
    }
  }

  &:has(select:focus-visible) {
    &:after {
      @include focus-visible;

      outline-offset: px-to-rem(var(--border-width-l));
    }
  }

  &:after,
  &:before {
    transition: background-color var(--animation-duration) var(--motion-ease-out);
  }

  &:after {
    @include forced-colors {
      border: px-to-rem(var(--border-width-s)) solid CanvasText;
    }

    position: absolute;
    inset: 0;
    content: "";
    height: 100%;
    width: 100%;
    z-index: -1;
    border-radius: px-to-rem(var(--spacing-l));
    background: var(--label-background);
  }

  &:before {
    position: absolute;
    inset-block-start: 50%;
    inset-inline-end: px-to-rem(2);
    content: "";
    height: px-to-rem(var(--spacing-m));
    width: px-to-rem(var(--spacing-m));
    transform: translateY(-50%);
    background: var(--label-background);
    z-index: 2;
  }

  .filterSelectLabelIcon {
    --icon-size: var(--spacing-m);

    position: absolute;
    inset-block-start: 50%;
    inset-inline-end: px-to-rem(var(--spacing-m));
    transform: translateY(-50%);
    width: px-to-rem(var(--icon-size));
    height: px-to-rem(var(--icon-size));
    z-index: 2;

    path {
      @include forced-colors {
        --icon-color: currentcolor;
      }

      stroke: var(--icon-color);
      transition: stroke var(--animation-duration) var(--motion-ease-out);
    }
  }
}

.filterSelectLabelText {
  @include screen-reader-only;
}

.filterSelect {
  @include label-text;

  appearance: none;
  position: relative;
  padding-block: px-to-rem(var(--spacing-m));
  padding-inline-start: px-to-rem(var(--spacing-l));
  padding-inline-end: px-to-rem(var(--spacing-2xl));
  background: none;
  border: 0;
  outline: 0;
  color: var(--label-color);
  max-width: 100%;
  text-overflow: ellipsis;
  overflow: hidden;
  transition: color var(--animation-duration) var(--motion-ease-out);

  @include mq($from: small) {
    padding-block: px-to-rem(var(--spacing-s));
  }
}

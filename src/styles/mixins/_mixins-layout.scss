@use "../utilities/utilities" as *;
@use "../utilities/functions" as *;
@use "../utilities/mediaqueries" as *;

@mixin block-layout-sticky-title($variant: "grid") {
  @include mq($to: large) {
    display: flex;
    flex-direction: column;
    row-gap: px-to-rem(var(--section-inside-s));
  }

  @include mq($from: large) {
    --heading-alignment-compensation: 5;

    column-gap: px-to-rem(var(--grid-gutter));

    > h2:first-child,
    > h3:first-child {
      position: sticky;
      will-change: transform;
      top: px-to-rem(calc(var(--sticky-offset-top) + var(--grid-gutter)));
      bottom: 0;
      align-self: flex-start;
    }

    // Vertically center the first line of the
    // headings next to each other
    h3:nth-child(2) {
      margin-block-start: px-to-rem(var(--heading-alignment-compensation));
    }
  }

  // Used if content of right column is within
  // a wrapper element
  @if $variant == "flex" {
    @include mq($from: large) {
      display: flex;
      flex-direction: row;

      > h2:first-child,
      > h3:first-child {
        flex: 0 0 33.3333%;
        padding-inline-end: calc(8.3333% + px-to-rem(var(--grid-gutter)));
      }

      > :not(:first-child) {
        flex: 0 0 calc(66.6666% - px-to-rem(var(--grid-gutter)));
      }
    }
  }

  @if $variant == "grid" {
    @include mq($from: large) {
      display: grid;
      grid-template-columns:
        [sticky-title] 3fr
        [gutter] 1fr
        [content] 7fr
        [gutter] 1fr;

      > h2:first-child,
      > h3:first-child {
        grid-column: sticky-title;
        grid-row: 1 / span 5;
      }

      > :not(:first-child) {
        grid-column: content;
      }
    }

    @include mq($from: ultra) {
      grid-template-columns: [sticky-title] 3fr [gutter] 1fr [content] 6fr [gutter] 2fr;
    }
  }
}

@mixin generic-block-padding {
  padding-block-start: px-to-rem(var(--section-top));
  padding-inline: px-to-rem(var(--grid-margin));
  padding-block-end: px-to-rem(var(--section-bottom));
}

@mixin text-block-padding {
  padding-block-start: px-to-rem(var(--text-block-top));
  padding-inline: px-to-rem(var(--grid-margin));
  padding-block-end: px-to-rem(var(--text-block-bottom));
}

@mixin generic-block-top-line-for-flex {
  position: absolute;
  background-color: var(--border-primary);
  inset-block-start: 0;
  height: px-to-rem(var(--border-width-l));
  inset-inline: px-to-rem(var(--grid-margin));
}

@mixin generic-block-top-line($variant: "grid") {
  @if $variant == "grid" {
    @include mq($to: large) {
      @include generic-block-top-line-for-flex;
    }

    @include mq($from: large) {
      display: block;
      grid-column: 1 / 4;
      grid-row: 1;
      margin-top: px-to-rem(calc(-1 * var(--section-top)));
      height: px-to-rem(var(--border-width-l));
      background-color: var(--border-primary);
    }
  }

  @if $variant == "flex" {
    @include generic-block-top-line-for-flex;
  }
}
